---
import HeaderLink from './HeaderLink.astro';

import { getLocale, getLocaleTexts } from '../utils/localize';
let locale = getLocale(Astro.request);
const localeTexts: any = await getLocaleTexts(locale)
const title = localeTexts.title;
const header = localeTexts.header;
---

<header>
	<canvas id="header-canvas"></canvas>
	<nav>
		<h2><a href="/">{title}</a></h2>
		<div class="internal-links">
			{header.map((link: any) =>
				<HeaderLink href={link.href}>{link.text}</HeaderLink>
			)}
			<!--<HeaderLink href="/pro.firpo.ru">ЧВТ</HeaderLink>-->
		</div>
		<div class="social-links">
			<a href="https://www.linkedin.com/in/kalinind/" target="_blank" data-tippy-content="LinkedIn" aria-label="LinkedIn">
				<svg xmlns="http://www.w3.org/2000/svg" width="37" height="38" viewBox="0 0 24 24"><g fill="none" fill-rule="evenodd"><path d="M24 0v24H0V0zM12.593 23.258l-.011.002l-.071.035l-.02.004l-.014-.004l-.071-.035q-.016-.005-.024.005l-.004.01l-.017.428l.005.02l.01.013l.104.074l.015.004l.012-.004l.104-.074l.012-.016l.004-.017l-.017-.427q-.004-.016-.017-.018m.265-.113l-.013.002l-.185.093l-.01.01l-.003.011l.018.43l.005.012l.008.007l.201.093q.019.005.029-.008l.004-.014l-.034-.614q-.005-.019-.02-.022m-.715.002a.02.02 0 0 0-.027.006l-.006.014l-.034.614q.001.018.017.024l.015-.002l.201-.093l.01-.008l.004-.011l.017-.43l-.003-.012l-.01-.01z"/><path fill="currentColor" d="M18 3a3 3 0 0 1 3 3v12a3 3 0 0 1-3 3H6a3 3 0 0 1-3-3V6a3 3 0 0 1 3-3zM8 10a1 1 0 0 0-1 1v5a1 1 0 1 0 2 0v-5a1 1 0 0 0-1-1m3-1a1 1 0 0 0-1 1v6a1 1 0 1 0 2 0v-3.66c.305-.344.82-.748 1.393-.993c.333-.142.834-.2 1.182-.09a.55.55 0 0 1 .293.188c.052.07.132.226.132.555v4a1 1 0 0 0 2 0v-4c0-.67-.17-1.266-.524-1.744a2.54 2.54 0 0 0-1.301-.907c-.902-.283-1.901-.126-2.568.16a6 6 0 0 0-.623.312A1 1 0 0 0 11 9M8 7a1 1 0 1 0 0 2a1 1 0 0 0 0-2"/></g></svg>
			</a>
			<a href="https://vk.com/kalininDanil17Y" target="_blank" data-tippy-content="Vk" aria-label="Vk">
				<svg
					viewBox="0 0 448 512"
					aria-hidden="true"
					width="32"
					height="32"
					astro-icon="social/mastodon2"
				><path
					fill="currentColor"
					d="M31.5 63.5C0 95 0 145.7 0 247V265C0 366.3 0 417 31.5 448.5C63 480 113.7 480 215 480H233C334.3 480 385 480 416.5 448.5C448 417 448 366.3 448 265V247C448 145.7 448 95 416.5 63.5C385 32 334.3 32 233 32H215C113.7 32 63 32 31.5 63.5zM75.6 168.3H126.7C128.4 253.8 166.1 290 196 297.4V168.3H244.2V242C273.7 238.8 304.6 205.2 315.1 168.3H363.3C359.3 187.4 351.5 205.6 340.2 221.6C328.9 237.6 314.5 251.1 297.7 261.2C316.4 270.5 332.9 283.6 346.1 299.8C359.4 315.9 369 334.6 374.5 354.7H321.4C316.6 337.3 306.6 321.6 292.9 309.8C279.1 297.9 262.2 290.4 244.2 288.1V354.7H238.4C136.3 354.7 78 284.7 75.6 168.3z"
				></path></svg
				>
			</a>
			<a href="https://www.facebook.com/profile.php?id=100018704474057" target="_blank" data-tippy-content="Facebook" aria-label="Facebook">
				<svg viewBox="0 0 512 512" aria-hidden="true" width="32" height="32" astro-icon="social/twitter"
				><path
					fill="currentColor"
					d="M512 256C512 114.6 397.4 0 256 0S0 114.6 0 256C0 376 82.7 476.8 194.2 504.5V334.2H141.4V256h52.8V222.3c0-87.1 39.4-127.5 125-127.5c16.2 0 44.2 3.2 55.7 6.4V172c-6-.6-16.5-1-29.6-1c-42 0-58.2 15.9-58.2 57.2V256h83.6l-14.4 78.2H287V510.1C413.8 494.8 512 386.9 512 256h0z"
				></path></svg
				>
			</a>
			<a href="https://github.com/kalininDanil17Y" target="_blank" data-tippy-content="GitHub" aria-label="GitHub">
				<svg viewBox="0 0 16 16" aria-hidden="true" width="32" height="32" astro-icon="social/github"
				><path
					fill="currentColor"
					d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z"
				></path></svg
				>
			</a>
			<a onclick={'changeLanguage("' + (locale === 'en' ? 'ru' : 'en') + '")'}  data-tippy-content="Toggle Lang" aria-label="Toggle Lang">
				<svg viewBox="0 0 600 600" width="32" height="32" xmlns="http://www.w3.org/2000/svg">  <path id="path241" style="color:#000000;fill:#000000;stroke-linecap:round;-inkscape-stroke:none" d="M 169.23678 -49.88168 A 46.419449 46.419449 0 0 0 122.81475 -3.4618798 L 122.81475 55.162979 L 0.26592663 55.162979 A 46.419399 46.419399 0 0 0 -46.153845 101.58278 A 46.419399 46.419399 0 0 0 0.26592663 148.00258 L 116.47311 148.00258 C 109.84235 231.66594 84.892611 296.90624 9.8820624 349.53878 A 46.419399 46.419399 0 0 0 -1.4558282 414.20006 A 46.419399 46.419399 0 0 0 63.206882 425.53431 C 117.86118 387.18509 154.12427 339.35301 177.04552 287.17079 C 199.33296 323.41323 229.4691 356.59924 269.49745 384.68589 A 46.419399 46.419399 0 0 0 334.1579 373.34936 A 46.419399 46.419399 0 0 0 322.82227 308.69036 C 260.47406 264.94257 232.70979 212.49731 221.29282 148.00258 L 338.13101 148.00258 A 46.419399 46.419399 0 0 0 384.54853 101.58278 A 46.419399 46.419399 0 0 0 338.13101 55.162979 L 215.65655 55.162979 L 215.65655 -3.4618798 A 46.419449 46.419449 0 0 0 169.23678 -49.88168 z M 449.2518 206.90099 A 46.419399 46.419399 0 0 0 406.83443 236.2442 L 268.37064 586.39306 A 46.419399 46.419399 0 0 0 294.46965 646.62961 A 46.419399 46.419399 0 0 0 354.70403 620.53257 L 380.02103 556.50959 L 531.51743 556.50959 L 556.83443 620.53257 A 46.419399 46.419399 0 0 0 617.07106 646.62961 A 46.419399 46.419399 0 0 0 643.16556 586.39306 L 504.70403 236.2442 A 46.419399 46.419399 0 0 0 462.28666 206.90099 A 46.419399 46.419399 0 0 0 455.76923 207.4367 A 46.419399 46.419399 0 0 0 449.2518 206.90099 z M 455.76923 364.95582 L 494.80394 463.66999 L 416.73452 463.66999 L 455.76923 364.95582 z " /> </svg>
			</a>
		</div>
	</nav>
</header>
<style>
	header {
		margin: 0;
		padding: 0 1em;
		background: rgba(255, 255, 255, .6);
		box-shadow: 0 2px 8px rgba(var(--black), 5%);

		position: sticky;
		top: 0;
		overflow: hidden;
		background: white;
	}

	h2 {
		margin: 0;
		font-size: 1em;
		display: flex;
		justify-content: center;
	}

	h2 a,
	h2 a.active {
		text-decoration: none;
	}
	nav {
		display: flex;
		align-items: center;
		justify-content: space-between;
		position: relative;
		z-index: 1;
		background: rgba(255, 255, 255, 0.6);
	}
	nav a {
		padding: .65em .65em;
		color: var(--black);
		border-bottom: 4px solid transparent;
		text-decoration: none;
		font-size: clamp(0.1rem, 1vw + 0.5rem, 1.1rem);
	}
	nav a.active {
		text-decoration: none;
		border-bottom-color: var(--accent);
	}
	.social-links,
	.social-links a {
		display: flex;
		align-items: center;
	}
	@media (max-width: 720px) {
		.social-links {
			display: none;
		}
	}

	#header-canvas {
		position: absolute;
		width: 100%;
		height: 150%;
		z-index: -1;
	}

	.internal-links {
		text-align: center;
	}
</style>
<script type="application/javascript" is:inline>
	// @ts-ignore
	function changeLanguage(locale) {
		document.cookie = `locale=${locale}; path=/; SameSite=Lax`;
		location.reload();
	}

	// Функции для сохранения и загрузки позиций точек
	function saveDotPositions(points) {
		const dots = points.map(point => ({
			x: point.x,
			y: point.y,
			vx: point.vx,
			vy: point.vy
		}));
		localStorage.setItem('dotPositions', JSON.stringify(dots));
	}

	function loadDotPositions() {
		const storedDots = localStorage.getItem('dotPositions');
		return storedDots ? JSON.parse(storedDots) : [];
		//return [];
	}

	// Загрузка сохраненных позиций или создание новых точек
	document.addEventListener("DOMContentLoaded", () => {
		const canvas = document.getElementById("header-canvas");
		const ctx = canvas.getContext("2d");
		const points = [];
		const pointCount = 50;
		const maxDistance = 100;

		function resizeCanvas() {
			canvas.width = canvas.offsetWidth;
			canvas.height = canvas.offsetHeight;
		}

		resizeCanvas();
		window.addEventListener('resize', resizeCanvas);

		class Point {
			constructor(x = Math.random() * canvas.width, y = Math.random() * canvas.height, vx = (Math.random() - 0.5), vy = (Math.random() - 0.5)) {
				this.x = x;
				this.y = y;
				this.vx = vx;
				this.vy = vy;
			}

			update() {
				this.x += this.vx;
				this.y += this.vy;

				// Отражение от границ
				if (this.x < 0 || this.x > canvas.width) this.vx *= -1;
				if (this.y < 0 || this.y > canvas.height) this.vy *= -1;
			}
		}

		// Загрузка точек из localStorage или создание новых
		const savedDots = loadDotPositions();
		if (savedDots.length > 0) {
			savedDots.forEach(dot => points.push(new Point(dot.x, dot.y, dot.vx, dot.vy)));
		} else {
			for (let i = 0; i < pointCount; i++) {
				points.push(new Point());
			}
		}

		function draw() {
			ctx.clearRect(0, 0, canvas.width, canvas.height);

			// Рисование точек
			points.forEach(point => {
				ctx.beginPath();
				ctx.arc(point.x, point.y, 2, 0, Math.PI * 2);
				ctx.fillStyle = "black";
				ctx.fill();
			});

			// Соединение линий между близкими точками
			for (let i = 0; i < points.length; i++) {
				for (let j = i + 1; j < points.length; j++) {
					const dx = points[i].x - points[j].x;
					const dy = points[i].y - points[j].y;
					const distance = Math.sqrt(dx * dx + dy * dy);

					if (distance < maxDistance) {
						ctx.beginPath();
						ctx.moveTo(points[i].x, points[i].y);
						ctx.lineTo(points[j].x, points[j].y);
						ctx.strokeStyle = `rgba(0, 0, 0, ${1 - distance / maxDistance})`;
						ctx.stroke();
					}
				}
			}

			// Обновление позиций точек
			points.forEach(point => point.update());
			requestAnimationFrame(draw);
		}

		// Сохранение позиций при уходе со страницы
		window.addEventListener('beforeunload', () => saveDotPositions(points));

		draw();
	});
</script>


---
import HeaderLink from './HeaderLink.astro';

import { getLocale, getLocaleTexts } from '../utils/localize';
let locale = getLocale();
const localeTexts: any = await getLocaleTexts(locale)
const title = localeTexts.title;
const header = localeTexts.header;
---

<header>
	<canvas id="header-canvas"></canvas>
	<nav>
		<h2><a href="/">{title}</a></h2>
		<div class="internal-links">
			{header.map((link: any) =>
				<HeaderLink href={link.href}>{link.text}</HeaderLink>
			)}
		</div>
		<div class="social-links">
			<a href="https://www.linkedin.com/in/kalinind/" target="_blank" title="LinkedIn" aria-label="LinkedIn">
				<iconify-icon icon="mdi:linkedin" width="32" height="32"></iconify-icon>
			</a>
			<a href="https://kalinindanil17y.t.me/" target="_blank" title="Telegram" aria-label="Telegram">
				<iconify-icon icon="mdi:telegram" width="32" height="32"></iconify-icon>
			</a>
			<a href="https://www.facebook.com/profile.php?id=100018704474057" target="_blank" title="Facebook" aria-label="Facebook">
				<iconify-icon icon="mdi:facebook" width="32" height="32"></iconify-icon>
			</a>
			<a href="https://github.com/kalininDanil17Y" target="_blank" title="GitHub" aria-label="GitHub">
				<iconify-icon icon="mdi:github" width="32" height="32"></iconify-icon>
			</a>
			<a id="lang-toggle" title="Toggle Language" aria-label="Toggle Language">
				<iconify-icon icon="mdi:translate" width="32" height="32"></iconify-icon>
			</a>
		</div>
	</nav>
</header>

<style>
	header {
		margin: 0;
		padding: 0 1em;
		background: rgba(255, 255, 255, .6);
		box-shadow: 0 2px 8px rgba(var(--black), 5%);
		position: sticky;
		top: 0;
		overflow: hidden;
		background: white;
	}

	h2 {
		margin: 0;
		font-size: 1em;
		display: flex;
		justify-content: center;
	}

	h2 a,
	h2 a.active {
		text-decoration: none;
	}
	
	nav {
		display: flex;
		align-items: center;
		justify-content: space-between;
		position: relative;
		z-index: 1;
		background: rgba(255, 255, 255, 0.6);
	}
	
	nav a {
		padding: .65em .65em;
		color: var(--black);
		border-bottom: 4px solid transparent;
		text-decoration: none;
		font-size: clamp(0.1rem, 1vw + 0.5rem, 1.1rem);
	}
	
	nav a.active {
		text-decoration: none;
		border-bottom-color: var(--accent);
	}
	
	.social-links,
	.social-links a {
		display: flex;
		align-items: center;
	}

	.social-links a {
		transition: opacity 0.2s ease;
	}

	.social-links a:hover {
		opacity: 0.7;
	}

	#lang-toggle {
		cursor: pointer;
	}
	
	@media (max-width: 720px) {
		.social-links {
			display: none;
		}
	}

	#header-canvas {
		position: absolute;
		width: 100%;
		height: 150%;
		z-index: -1;
	}

	.internal-links {
		text-align: center;
	}
</style>

<script>
	import 'iconify-icon';
</script>

<script type="application/javascript" is:inline>
	// Canvas animation code
	function saveDotPositions(points) {
		const dots = points.map(point => ({
			x: point.x,
			y: point.y,
			vx: point.vx,
			vy: point.vy
		}));
		localStorage.setItem('dotPositions', JSON.stringify(dots));
	}

	function loadDotPositions() {
		const storedDots = localStorage.getItem('dotPositions');
		return storedDots ? JSON.parse(storedDots) : [];
	}

	document.addEventListener("DOMContentLoaded", () => {
		const canvas = document.getElementById("header-canvas");
		const ctx = canvas.getContext("2d");
		const points = [];
		const pointCount = 50;
		const maxDistance = 100;

		function resizeCanvas() {
			canvas.width = canvas.offsetWidth;
			canvas.height = canvas.offsetHeight;
		}

		resizeCanvas();
		window.addEventListener('resize', resizeCanvas);

		class Point {
			constructor(x = Math.random() * canvas.width, y = Math.random() * canvas.height, vx = (Math.random() - 0.5), vy = (Math.random() - 0.5)) {
				this.x = x;
				this.y = y;
				this.vx = vx;
				this.vy = vy;
			}

			update() {
				this.x += this.vx;
				this.y += this.vy;

				if (this.x < 0 || this.x > canvas.width) this.vx *= -1;
				if (this.y < 0 || this.y > canvas.height) this.vy *= -1;
			}
		}

		const savedDots = loadDotPositions();
		if (savedDots.length > 0) {
			savedDots.forEach(dot => points.push(new Point(dot.x, dot.y, dot.vx, dot.vy)));
		} else {
			for (let i = 0; i < pointCount; i++) {
				points.push(new Point());
			}
		}

		function draw() {
			ctx.clearRect(0, 0, canvas.width, canvas.height);

			points.forEach(point => {
				ctx.beginPath();
				ctx.arc(point.x, point.y, 2, 0, Math.PI * 2);
				ctx.fillStyle = "black";
				ctx.fill();
			});

			for (let i = 0; i < points.length; i++) {
				for (let j = i + 1; j < points.length; j++) {
					const dx = points[i].x - points[j].x;
					const dy = points[i].y - points[j].y;
					const distance = Math.sqrt(dx * dx + dy * dy);

					if (distance < maxDistance) {
						ctx.beginPath();
						ctx.moveTo(points[i].x, points[i].y);
						ctx.lineTo(points[j].x, points[j].y);
						ctx.strokeStyle = `rgba(0, 0, 0, ${1 - distance / maxDistance})`;
						ctx.stroke();
					}
				}
			}

			points.forEach(point => point.update());
			requestAnimationFrame(draw);
		}

		window.addEventListener('beforeunload', () => saveDotPositions(points));

		draw();
	});
</script>

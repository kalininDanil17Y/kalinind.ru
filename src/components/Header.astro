---
// Для статической генерации используем русский язык по умолчанию
const localeTexts = await import('../locales/ru.json');
const title = localeTexts.title;
const header = localeTexts.header;
---

<header class="header">
	<nav class="nav">
		<div class="nav-brand">
			<a href="#" class="brand-link">{title}</a>
		</div>
		
		<div class="nav-links">
			{header.map((link: any) =>
				<a href={link.href} class="nav-link">{link.text}</a>
			)}
		</div>
		
		<div class="nav-controls">
			<button id="theme-toggle" class="control-btn" title="Toggle Theme" aria-label="Toggle Theme">
				<iconify-icon icon="mdi:theme-light-dark" width="20" height="20"></iconify-icon>
			</button>
			<button id="lang-toggle" class="control-btn" title="Toggle Language" aria-label="Toggle Language">
				<iconify-icon icon="mdi:translate" width="16" height="16"></iconify-icon>
				<span class="lang-text" id="lang-text">RU</span>
			</button>
			<button class="mobile-menu-toggle" id="mobile-menu-toggle">
				<span></span>
				<span></span>
				<span></span>
			</button>
		</div>
	</nav>
</header>

<style>
	.header {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		z-index: 1000;
		background: rgba(var(--background-rgb), 0.95);
		backdrop-filter: blur(10px);
		border-bottom: 1px solid rgba(var(--gray-light), 0.1);
		transition: all 0.3s ease;
	}

	:global(body.dark-theme) .header {
		background: rgba(26, 26, 26, 0.95);
		border-bottom-color: rgba(255, 255, 255, 0.1);
	}

	.nav {
		max-width: 1200px;
		margin: 0 auto;
		padding: 1rem 2rem;
		display: flex;
		align-items: center;
		justify-content: space-between;
	}

	.nav-brand .brand-link {
		font-size: 1.5rem;
		font-weight: 700;
		color: var(--accent);
		text-decoration: none;
		transition: color 0.3s ease;
	}

	.nav-brand .brand-link:hover {
		color: var(--accent-dark);
	}

	.nav-links {
		display: flex;
		gap: 2rem;
		align-items: center;
	}

	.nav-link {
		color: rgb(var(--gray-dark));
		text-decoration: none;
		font-weight: 500;
		padding: 0.5rem 1rem;
		border-radius: 8px;
		transition: all 0.3s ease;
		position: relative;
	}

	.nav-link:hover {
		color: var(--accent);
		background: rgba(var(--accent-rgb), 0.1);
	}

	.nav-controls {
		display: flex;
		align-items: center;
		gap: 0.5rem;
	}

	.control-btn {
		display: flex;
		align-items: center;
		gap: 0.3rem;
		padding: 0.5rem 0.75rem;
		background: rgba(var(--gray-light), 0.1);
		border: 1px solid rgba(var(--gray-light), 0.2);
		border-radius: 8px;
		color: rgb(var(--gray-dark));
		cursor: pointer;
		font-size: 0.9rem;
		font-weight: 500;
		transition: all 0.2s ease;
		font-family: inherit;
	}

	.control-btn:hover {
		background: rgba(var(--gray-light), 0.2);
		border-color: rgba(var(--gray-light), 0.4);
		transform: translateY(-1px);
	}

	.mobile-menu-toggle {
		display: none;
		flex-direction: column;
		gap: 3px;
		background: none;
		border: none;
		cursor: pointer;
		padding: 0.5rem;
	}

	.mobile-menu-toggle span {
		width: 20px;
		height: 2px;
		background: rgb(var(--gray-dark));
		transition: all 0.3s ease;
	}

	@media (max-width: 768px) {
		.nav {
			padding: 1rem;
		}

		.nav-links {
			display: none;
		}

		.mobile-menu-toggle {
			display: flex;
		}

		.lang-text {
			display: none;
		}

		.control-btn {
			padding: 0.5rem;
		}
	}

	/* CSS переменные для цветов */
	:root {
		--background-rgb: 255, 255, 255;
		--accent-rgb: 35, 55, 255;
	}

	:global(body.dark-theme) {
		--background-rgb: 26, 26, 26;
		--accent-rgb: 79, 107, 255;
	}
</style>

<script>
	import 'iconify-icon';
</script>

<script type="application/javascript" is:inline>
	// Theme management
	function initTheme() {
		const savedTheme = localStorage.getItem('theme');
		const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
		const theme = savedTheme || (prefersDark ? 'dark' : 'light');
		
		document.body.classList.toggle('dark-theme', theme === 'dark');
		updateThemeIcon(theme);
	}

	function toggleTheme() {
		const isDark = document.body.classList.contains('dark-theme');
		const newTheme = isDark ? 'light' : 'dark';
		
		document.body.classList.toggle('dark-theme', newTheme === 'dark');
		localStorage.setItem('theme', newTheme);
		updateThemeIcon(newTheme);
	}

	function updateThemeIcon(theme) {
		const themeButton = document.getElementById('theme-toggle');
		const icon = themeButton?.querySelector('iconify-icon');
		if (icon) {
			icon.setAttribute('icon', theme === 'dark' ? 'mdi:weather-sunny' : 'mdi:weather-night');
		}
	}

	function updateLanguageButton() {
		const langButton = document.getElementById('lang-text');
		const currentLang = localStorage.getItem('preferred-language') || 'ru';
		if (langButton) {
			langButton.textContent = currentLang.toUpperCase();
		}
	}

	// Smooth scrolling for navigation links
	function initSmoothScrolling() {
		document.querySelectorAll('.nav-link[href^="#"]').forEach(link => {
			link.addEventListener('click', (e) => {
				e.preventDefault();
				const targetId = link.getAttribute('href').substring(1);
				const targetElement = document.getElementById(targetId);
				
				if (targetElement) {
					const headerHeight = document.querySelector('.header').offsetHeight;
					const targetPosition = targetElement.offsetTop - headerHeight - 20;
					
					window.scrollTo({
						top: targetPosition,
						behavior: 'smooth'
					});
				}
			});
		});
	}

	document.addEventListener("DOMContentLoaded", () => {
		initTheme();
		updateLanguageButton();
		initSmoothScrolling();

		// Theme toggle event listener
		const themeToggle = document.getElementById('theme-toggle');
		if (themeToggle) {
			themeToggle.addEventListener('click', toggleTheme);
		}

		// System theme change listener
		window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
			if (!localStorage.getItem('theme')) {
				document.body.classList.toggle('dark-theme', e.matches);
				updateThemeIcon(e.matches ? 'dark' : 'light');
			}
		});
	});
</script>
